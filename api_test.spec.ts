/**
 * bnm
 * Books N More's API
 *
 * OpenAPI spec version: 1.0
 * Contact: samarthr1@outlook.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("getAdminGetAuthKey", () => {
    return expect(instance.getAdminGetAuthKey({})).resolves.toBe(null)
  })
  test("getErrorToStrings", () => {
    return expect(instance.getErrorToStrings({})).resolves.toBe(null)
  })
  test("getGetAuthKey", () => {
    return expect(instance.getGetAuthKey({})).resolves.toBe(null)
  })
  test("postAdminBookById", () => {
    const body: api.MemberActionInput = undefined
    return expect(instance.postAdminBookById(body, {})).resolves.toBe(null)
  })
  test("postAdminEditBookById", () => {
    const body: api.AdminEditBookByIdBody = {
  "value" : {
    "ISBN" : "string",
    "author" : "string",
    "bookId" : 0,
    "shelfCode" : "string",
    "title" : "string",
    "authKey" : "string"
  }
}
    return expect(instance.postAdminEditBookById(body, {})).resolves.toBe(null)
  })
  test("postAdminLogin", () => {
    const body: api.AdminLoginBody = undefined
    return expect(instance.postAdminLogin(body, {})).resolves.toBe(null)
  })
  test("postAdminReadyToDispatch", () => {
    const body: api.AdminActionInput = undefined
    return expect(instance.postAdminReadyToDispatch(body, {})).resolves.toBe(null)
  })
  test("postAdminReadyToDispatchBooks", () => {
    const body: api.VerifyKeyBody = undefined
    return expect(instance.postAdminReadyToDispatchBooks(body, {})).resolves.toBe(null)
  })
  test("postAdminReadyToReturn", () => {
    const body: api.VerifyKeyBody = undefined
    return expect(instance.postAdminReadyToReturn(body, {})).resolves.toBe(null)
  })
  test("postAdminReservedBooks", () => {
    const body: api.AdminReservedBooksBody = undefined
    return expect(instance.postAdminReservedBooks(body, {})).resolves.toBe(null)
  })
  test("postAdminReturned", () => {
    const body: api.AdminActionInput = undefined
    return expect(instance.postAdminReturned(body, {})).resolves.toBe(null)
  })
  test("postAdminVerifyKey", () => {
    const body: api.VerifyKeyBody = undefined
    return expect(instance.postAdminVerifyKey(body, {})).resolves.toBe(null)
  })
  test("postCancelReadyToReturnBook", () => {
    const body: api.MemberActionInput = undefined
    return expect(instance.postCancelReadyToReturnBook(body, {})).resolves.toBe(null)
  })
  test("postCancelReserveBook", () => {
    const body: api.MemberActionInput = undefined
    return expect(instance.postCancelReserveBook(body, {})).resolves.toBe(null)
  })
  test("postCreateMember", () => {
    const body: api.CreateMemberInput = undefined
    return expect(instance.postCreateMember(body, {})).resolves.toBe(null)
  })
  test("postCreatePlan", () => {
    const body: api.CreatePlanBody = undefined
    return expect(instance.postCreatePlan(body, {})).resolves.toBe(null)
  })
  test("postGetHotBooks", () => {
    const body: api.VerifyKeyBody = undefined
    return expect(instance.postGetHotBooks(body, {})).resolves.toBe(null)
  })
  test("postGetMember", () => {
    const body: api.VerifyKeyBody = undefined
    return expect(instance.postGetMember(body, {})).resolves.toBe(null)
  })
  test("postGetPlanTypes", () => {
    const body: api.VerifyKeyBody = undefined
    return expect(instance.postGetPlanTypes(body, {})).resolves.toBe(null)
  })
  test("postLogin", () => {
    const body: api.UserLoginBody = undefined
    return expect(instance.postLogin(body, {})).resolves.toBe(null)
  })
  test("postReadyToReturnBook", () => {
    const body: api.MemberActionInput = undefined
    return expect(instance.postReadyToReturnBook(body, {})).resolves.toBe(null)
  })
  test("postReserveBook", () => {
    const body: api.MemberActionInput = undefined
    return expect(instance.postReserveBook(body, {})).resolves.toBe(null)
  })
  test("postSearch", () => {
    const body: api.SearchBody = undefined
    return expect(instance.postSearch(body, {})).resolves.toBe(null)
  })
  test("postVerifyKey", () => {
    const body: api.VerifyKeyBody = undefined
    return expect(instance.postVerifyKey(body, {})).resolves.toBe(null)
  })
})

